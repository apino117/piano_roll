{"version":3,"sources":["App.js","registerServiceWorker.js","index.js"],"names":["Tone","require","App","state","audioContext","playSynth","synth","FMSynth","toMaster","triggerAttackRelease","Time","_this","resume","then","console","log","context","AudioContext","this","setState","react_default","a","createElement","Fragment","className","id","type","readOnly","value","placeholder","onClick","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"yNAEMA,SAAOC,EAAQ,KAoENC,6MAhEbC,MAAQ,CACNC,aAAc,MAUhBC,UAAY,WAIV,IAAMC,GAAQ,IAAIN,EAAKO,SAAUC,WAEjCF,EAAMG,qBAAqB,KAAM,KAAM,MACvCH,EAAMG,qBAAqB,KAAM,KAAMT,EAAKU,KAAK,MAAQV,EAAKU,KAAK,OACnEJ,EAAMG,qBAAqB,KAAM,MAAO,MACxCH,EAAMG,qBAAqB,KAAM,MAAOT,EAAKU,KAAK,MAAQV,EAAKU,KAAK,OACpEJ,EAAMG,qBAAqB,KAAM,KAAMT,EAAKU,KAAK,MAA0B,EAAlBV,EAAKU,KAAK,OACnEJ,EAAMG,qBAAqB,KAAM,KAAM,OAEvCE,EAAKR,MAAMC,aAAaQ,SAASC,KAAK,WACpCC,QAAQC,IAAI,uHAnBd,IAAMC,EAAU,IAAIC,aAEpBC,KAAKC,SAAS,CAAEf,aAAcY,qCAyB9B,OACEI,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACEH,EAAAC,EAAAC,cAAA,OAAKE,UAAU,YAAYC,GAAG,0BAC5BL,EAAAC,EAAAC,cAAA,OAAKE,UAAU,MAAMC,GAAG,oBAEtBL,EAAAC,EAAAC,cAAA,wBAEAF,EAAAC,EAAAC,cAAA,OAAKE,UAAU,SAASC,GAAG,uBAIzBL,EAAAC,EAAAC,cAAA,OAAKE,UAAU,kBACbJ,EAAAC,EAAAC,cAAA,SAAOE,UAAU,2BAAjB,eACAJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,aACbJ,EAAAC,EAAAC,cAAA,SAAOI,KAAK,OAAOC,UAAQ,EAACH,UAAU,yBAAyBC,GAAG,YAAYG,MAAM,GAAGC,YAAY,2BACnGT,EAAAC,EAAAC,cAAA,UAAQI,KAAK,SAASI,QAASZ,KAAKb,UAAWmB,UAAU,wBAAzD,uBAlDAO,aCMZC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA6BN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACT1B,KAAK,SAAA8B,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB1C,QACfqC,UAAUC,cAAcO,WAK1BlC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,2CAMrBkC,MAAM,SAAAC,GACLpC,QAAQoC,MAAM,4CAA6CA,KChEjEC,IAASC,OAAOhC,EAAAC,EAAAC,cAAC+B,EAAD,MAASC,SAASC,eAAe,SDclC,WACb,GAA6C,kBAAmBf,UAAW,CAGzE,GADkB,IAAIgB,IAAIC,GAAwBvB,OAAOC,UAC3CuB,SAAWxB,OAAOC,SAASuB,OAIvC,OAGFxB,OAAOyB,iBAAiB,OAAQ,WAC9B,IAAMpB,EAAK,GAAAqB,OAAMH,GAAN,sBAENzB,EAwCX,SAAiCO,GAE/BsB,MAAMtB,GACH1B,KAAK,SAAAiD,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7C1B,UAAUC,cAAc0B,MAAMtD,KAAK,SAAA8B,GACjCA,EAAayB,aAAavD,KAAK,WAC7BqB,OAAOC,SAASkC,aAKpB/B,EAAgBC,KAGnBU,MAAM,WACLnC,QAAQC,IACN,mEAzDAuD,CAAwB/B,GAHxBD,EAAgBC,MC7BxBgC","file":"static/js/main.a4c0d51e.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\nconst Tone = require(\"tone\");\n\nclass App extends Component {\n\n  state = {\n    audioContext: {}\n  }\n\n  componentDidMount() {\n\n    const context = new AudioContext();\n\n    this.setState({ audioContext: context });\n  }\n\n  playSynth = () => {\n\n\n\n    const synth = new Tone.FMSynth().toMaster();\n    //schedule a series of notes to play as soon as the page loads\n    synth.triggerAttackRelease('C4', '4n', '8n')\n    synth.triggerAttackRelease('E4', '8n', Tone.Time('4n') + Tone.Time('8n'))\n    synth.triggerAttackRelease('G4', '16n', '2n')\n    synth.triggerAttackRelease('B4', '16n', Tone.Time('2n') + Tone.Time('8t'))\n    synth.triggerAttackRelease('G4', '16', Tone.Time('2n') + Tone.Time('8t') * 2)\n    synth.triggerAttackRelease('E4', '2n', '0:3')\n\n    this.state.audioContext.resume().then(() => {\n      console.log('Playback resumed successfully');\n    });\n\n\n  }\n\n\n  render() {\n    return (\n      <>\n        <div className=\"container\" id=\"main-content-container\">\n          <div className=\"row\" id=\"main-content-row\">\n\n            <h1>Piano Roll</h1>\n\n            <div className=\"col-12\" id=\"main-content-column\">\n\n\n\n              <div className=\"form-group row\">\n                <label className=\"col-sm-2 col-form-label\">Input a URL</label>\n                <div className=\"col-sm-10\">\n                  <input type=\"text\" readOnly className=\"form-control-plaintext\" id=\"staticURL\" value=\"\" placeholder=\"https://www.google.com\" />\n                  <button type=\"submit\" onClick={this.playSynth} className=\"btn btn-primary mb-2\">Submit</button>\n                </div>\n              </div>\n\n\n\n\n\n            </div>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default App;\n\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log(\"New content is available; please refresh.\");\n            } else {\n              // At this point, everything has been pre-cached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nregisterServiceWorker();\n"],"sourceRoot":""}